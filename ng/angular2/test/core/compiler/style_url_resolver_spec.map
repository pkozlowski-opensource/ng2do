{"version":3,"sources":["style_url_resolver_spec.js","@traceur/generated/TemplateParser/10","@traceur/generated/TemplateParser/7"],"names":[],"mappings":"AAAA,KAAO,EAAC,QAAO;AAAG,GAAC;AAAG,OAAK;AAAG,WAAS;AAAG,UAAQ;AAAG,IAAE;AAAG,IAAE;AAAG,GAAC,CAAC,KAAO,oBAAkB,CAAC;AAC3F,KAAO,EAAC,gBAAe,CAAC,KAAO,gDAA8C,CAAC;AAE9E,KAAO,EAAC,WAAU,CAAC,KAAO,0CAAwC,CAAC;AAEnE,KAAO,SAAS,KAAG,CAAE,AAAD,CAAG;AACrB,SAAO,AAAC,CAAC,kBAAiB,CAAG,EAAC,AAAD,IAAM;AACjC,KAAC,AAAC,CAAC,qBAAoB,CAAG,EAAC,AAAD,IAAM;AAC9B,AAAI,QAAA,CAAA,gBAAe,EAAI,IAAI,iBAAe,AAAC,CAAC,GAAI,gBAAc,AAAC,EAAC,CAAC,CAAC;AAClE,AAAI,QAAA,CAAA,GAAE,EAAI,+RAWT,CAAC;AACF,AAAI,QAAA,CAAA,WAAU,EAAI,2UAWjB,CAAC;AAEF,AAAI,QAAA,CAAA,WAAU,EAAI,CAAA,gBAAe,YAAY,AAAC,CAAC,GAAE,CAAG,OAAK,CAAC,CAAC;AAC3D,WAAK,AAAC,CAAC,WAAU,CAAC,QAAQ,AAAC,CAAC,WAAU,CAAC,CAAC;IAC1C,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ;AAAA,AAEA,IAAM,gBAAc,QAAU,YAAU;AACtC,QAAM,CAAE,OAAM,AAAQ,CAAG,CAAA,GAAE,AAAQ,CAAW;AAC5C,SAAO,CAAA,OAAM,EAAI,IAAE,CAAA,CAAI,IAAE,CAAC;EAC5B;AAAA,AACF;AC5CA,KAAK,eAAe,AAAC,iDACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YCD1B,MAAK,KAAK,WAAV,MAAK,KAAK,UDCuC;EAAC,CAAC,CAAC,CAAC;AD4CrD","file":"d:/work/gitrepos/gh/pkozlowski-opensource/angular/modules/angular2/test/core/compiler/style_url_resolver_spec.js","sourceRoot":"d:/work/gitrepos/gh/pkozlowski-opensource/angular/modules/angular2/test/core/compiler/","sourcesContent":["import {describe, it, expect, beforeEach, ddescribe, iit, xit, el} from 'angular2/test_lib';\nimport {StyleUrlResolver} from 'angular2/src/core/compiler/style_url_resolver';\n\nimport {UrlResolver} from 'angular2/src/core/compiler/url_resolver';\n\nexport function main() {\n  describe('StyleUrlResolver', () => {\n    it('should resolve urls', () => {\n      var styleUrlResolver = new StyleUrlResolver(new FakeUrlResolver());\n      var css = `\n      @import '1.css';\n      @import \"2.css\";\n      @import url('3.css');\n      @import url(\"4.css\");\n      @import url(5.css);\n\n      .foo {\n        background-image: url(\"double.jpg\");\n        background-image: url('simple.jpg');\n        background-image: url(noquote.jpg);\n      }`;\n      var expectedCss = `\n      @import 'base/1.css';\n      @import 'base/2.css';\n      @import url('base/3.css');\n      @import url('base/4.css');\n      @import url('base/5.css');\n\n      .foo {\n        background-image: url('base/double.jpg');\n        background-image: url('base/simple.jpg');\n        background-image: url('base/noquote.jpg');\n      }`;\n\n      var resolvedCss = styleUrlResolver.resolveUrls(css, 'base');\n      expect(resolvedCss).toEqual(expectedCss);\n    });\n  });\n}\n\nclass FakeUrlResolver extends UrlResolver {\n  resolve(baseUrl: string, url: string): string {\n    return baseUrl + '/' + url;\n  }\n}\n","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});","assert.type.$__placeholder__0)"]}