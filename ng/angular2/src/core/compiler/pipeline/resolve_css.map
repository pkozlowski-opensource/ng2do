{"version":3,"sources":["resolve_css.js","@traceur/generated/TemplateParser/10","@traceur/generated/TemplateParser/7"],"names":[],"mappings":"AAAA,KAAO,EAAC,WAAU,CAAC,KAAO,iBAAe,CAAC;AAC1C,KAAO,EAAC,cAAa,CAAC,KAAO,oBAAkB,CAAC;AAChD,KAAO,EAAC,cAAa,CAAC,KAAO,oBAAkB,CAAC;AAEhD,KAAO,EAAC,iBAAgB,CAAC,KAAO,gDAA8C,CAAC;AAC/E,KAAO,EAAC,iBAAgB,CAAC,KAAO,iDAA+C,CAAC;AAEhF,KAAO,EAAC,GAAE,CAAC,KAAO,0BAAwB,CAAC;AAC3C,KAAO,EAAC,IAAG,CAAC,KAAO,2BAAyB,CAAC;AAC7C,KAAO,EAAC,cAAa,CAAC,KAAO,4BAA0B,CAAC;AACxD,KAAO,EAAC,WAAU,CAAC,KAAO,iCAA+B,CAAC;AAE1D,KAAO,MAAM,WAAS,QAAU,YAAU;AACxC,AAIA,YAAU,CAAE,WAAU,AAAmB,CAAG,CAAA,QAAO,AAAmB,CAAG,CAAA,WAAU,AAAQ,CAAG;AAC5F,QAAI,AAAC,EAAC,CAAC;AACP,OAAG,UAAU,EAAI,SAAO,CAAC;AACzB,OAAG,WAAW,EAAI,CAAA,WAAU,KAAK,CAAC;AAClC,OAAG,aAAa,EAAI,YAAU,CAAC;EACjC;AAAA,AAEA,QAAM,CAAE,MAAK,AAAe,CAAG,CAAA,OAAM,AAAe,CAAG,CAAA,OAAM,AAAe,CAAG;AAE7E,OAAI,GAAE,QAAQ,AAAC,CAAC,OAAM,QAAQ,CAAC,CAAA,EAAK,QAAM,CAAG;AAC3C,YAAM,eAAe,EAAI,KAAG,CAAC;AAC7B,AAAI,QAAA,CAAA,OAAM,EAAI,CAAA,OAAM,QAAQ,CAAC;AAE7B,AAAI,QAAA,CAAA,GAAE,EAAI,CAAA,GAAE,QAAQ,AAAC,CAAC,OAAM,CAAC,CAAC;AAC9B,QAAE,EAAI,CAAA,IAAG,UAAU,mBAAmB,AAAC,CAAC,GAAE,CAAG,CAAA,IAAG,aAAa,CAAG,CAAA,IAAG,WAAW,CAAC,CAAC;AAChF,SAAI,cAAa,UAAU,AAAC,CAAC,GAAE,CAAC,CAAG;AACjC,kBAAU,KAAK,AAAC,CAAC,MAAK,mBAAmB,cAAc,CAAG,IAAE,CAAC,CAAC;AAC9D,UAAE,QAAQ,AAAC,CAAC,OAAM,CAAG,GAAC,CAAC,CAAC;AACxB,UAAE,KAAK,AAAC,CAAC,CAAC,GAAE,IAAM;AAChB,YAAE,QAAQ,AAAC,CAAC,OAAM,CAAG,IAAE,CAAC,CAAC;QAC3B,CAAC,CAAA;MACH,KAAO;AACL,UAAE,QAAQ,AAAC,CAAC,OAAM,CAAG,IAAE,CAAC,CAAC;MAC3B;AAAA,AAEA,SAAG,UAAU,mBAAmB,AAAC,CAAC,OAAM,CAAC,CAAC;IAC5C;AAAA,EACF;AAAA,AACF;AAAA,AC7CA,KAAK,eAAe,AAAC,0BACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YDgBC,iBAAgB,IAAa,iBAAgB,IEjBxE,MAAK,KAAK,UDCuC;EAAC,CAAC,CAAC,CAAC;AADrD,KAAK,eAAe,AAAC,4CACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YDuBT,cAAa,IAAW,cAAa,IAAW,cAAa,GCvB7B;EAAC,CAAC,CAAC,CAAC;AD8CrD","file":"d:/work/gitrepos/gh/pkozlowski-opensource/angular/modules/angular2/src/core/compiler/pipeline/resolve_css.js","sourceRoot":"d:/work/gitrepos/gh/pkozlowski-opensource/angular/modules/angular2/src/core/compiler/pipeline/","sourcesContent":["import {CompileStep} from './compile_step';\nimport {CompileElement} from './compile_element';\nimport {CompileControl} from './compile_control';\n\nimport {DirectiveMetadata} from 'angular2/src/core/compiler/directive_metadata';\nimport {ShadowDomStrategy} from 'angular2/src/core/compiler/shadow_dom_strategy';\n\nimport {DOM} from 'angular2/src/facade/dom';\nimport {Type} from 'angular2/src/facade/lang';\nimport {PromiseWrapper} from 'angular2/src/facade/async';\nimport {ListWrapper} from 'angular2/src/facade/collection';\n\nexport class ResolveCss extends CompileStep {\n  _strategy: ShadowDomStrategy;\n  _component: Type;\n  _templateUrl: string;\n\n  constructor(cmpMetadata: DirectiveMetadata, strategy: ShadowDomStrategy, templateUrl: string) {\n    super();\n    this._strategy = strategy;\n    this._component = cmpMetadata.type;\n    this._templateUrl = templateUrl;\n  }\n\n  process(parent:CompileElement, current:CompileElement, control:CompileControl) {\n    // May be remove the styles\n    if (DOM.tagName(current.element) == 'STYLE') {\n      current.ignoreBindings = true;\n      var styleEl = current.element;\n\n      var css = DOM.getText(styleEl);\n      css = this._strategy.transformStyleText(css, this._templateUrl, this._component);\n      if (PromiseWrapper.isPromise(css)) {\n        ListWrapper.push(parent.inheritedProtoView.stylePromises, css);\n        DOM.setText(styleEl, '');\n        css.then((css) => {\n          DOM.setText(styleEl, css);\n        })\n      } else {\n        DOM.setText(styleEl, css);\n      }\n\n      this._strategy.handleStyleElement(styleEl);\n    }\n  }\n}\n\n","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});","assert.type.$__placeholder__0)"]}