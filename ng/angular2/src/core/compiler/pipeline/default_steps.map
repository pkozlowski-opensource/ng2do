{"version":3,"sources":["default_steps.js","@traceur/generated/TemplateParser/10","@traceur/generated/TemplateParser/25","@traceur/generated/TemplateParser/7"],"names":[],"mappings":"AAAA,KAAO,EAAC,eAAc;AAAG,OAAK,CAAC,KAAO,4BAA0B,CAAC;AACjE,KAAO,EAAC,IAAG;AAAG,YAAU,CAAC,KAAO,iCAA+B,CAAC;AAEhE,KAAO,EAAC,qBAAoB,CAAC,KAAO,4BAA0B,CAAC;AAC/D,KAAO,EAAC,uBAAsB,CAAC,KAAO,8BAA4B,CAAC;AACnE,KAAO,EAAC,eAAc,CAAC,KAAO,qBAAmB,CAAC;AAClD,KAAO,EAAC,YAAW,CAAC,KAAO,kBAAgB,CAAC;AAC5C,KAAO,EAAC,oBAAmB,CAAC,KAAO,2BAAyB,CAAC;AAC7D,KAAO,EAAC,gBAAe,CAAC,KAAO,uBAAqB,CAAC;AACrD,KAAO,EAAC,2BAA0B,CAAC,KAAO,mCAAiC,CAAC;AAC5E,KAAO,EAAC,oBAAmB,CAAC,KAAO,2BAAyB,CAAC;AAC7D,KAAO,EAAC,UAAS,CAAC,KAAO,gBAAc,CAAC;AACxC,KAAO,EAAC,aAAY,CAAC,KAAO,oBAAkB,CAAC;AAC/C,KAAO,EAAC,iBAAgB,CAAC,KAAO,gDAA8C,CAAC;AAC/E,KAAO,EAAC,iBAAgB;AAAG,0BAAwB,CAAC,KAAO,iDAA+C,CAAC;AAO3G,KAAO,SAAS,mBAAiB,CAC7B,eAAc,AAAgB,CAC9B,CAAA,MAAK,AAAO,CACZ,CAAA,iBAAgB,AAAmB,CACnC,CAAA,UAAS,AAAyB,CAClC,CAAA,iBAAgB,AAAmB,CACnC,CAAA,WAAU,AAAQ,CAAG;AAEvB,AAAI,IAAA,CAAA,KAAI,EAAI,EACV,GAAI,aAAW,AAAC,CAAC,MAAK,CAAC,CACvB,IAAI,WAAS,AAAC,CAAC,iBAAgB,CAAG,kBAAgB,CAAG,YAAU,CAAC,CAChE,IAAI,sBAAoB,AAAC,CAAC,MAAK,CAAC,CAChC,IAAI,gBAAc,AAAC,CAAC,UAAS,CAAC,CAC9B,IAAI,wBAAsB,AAAC,CAAC,MAAK,CAAC,CAClC,IAAI,qBAAmB,AAAC,EAAC,CACzB,IAAI,iBAAe,AAAC,CAAC,eAAc,CAAG,kBAAgB,CAAC,CACvD,IAAI,4BAA0B,AAAC,EAAC,CAChC,IAAI,qBAAmB,AAAC,CAAC,MAAK,CAAC,CACjC,CAAA;AAEA,KAAI,iBAAgB,WAAa,0BAAwB,CAAG;AAC1D,AAAI,MAAA,CAAA,IAAG,EAAI,IAAI,cAAY,AAAC,CAAC,iBAAgB,CAAG,kBAAgB,CAAC,CAAC;AAClE,cAAU,KAAK,AAAC,CAAC,KAAI,CAAG,KAAG,CAAC,CAAC;EAC/B;AAAA,AAEA,OAAO,MAAI,CAAC;AACd;AAAA,AC/CA,KAAK,eAAe,AAAC,kCACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YDqBN,eAAc,IACvB,MAAK,IACO,iBAAgB,IExBvC,MAAK,YAAY,AFyBD,CAAA,IAAG,CAAE,kBAAgB,CAAC,AEzBF,IF0Bb,iBAAgB,IG1BvC,MAAK,KAAK,UFCuC;EAAC,CAAC,CAAC,CAAC;AD+CrD","file":"d:/work/gitrepos/gh/pkozlowski-opensource/angular/modules/angular2/src/core/compiler/pipeline/default_steps.js","sourceRoot":"d:/work/gitrepos/gh/pkozlowski-opensource/angular/modules/angular2/src/core/compiler/pipeline/","sourcesContent":["import {ChangeDetection, Parser} from 'angular2/change_detection';\nimport {List, ListWrapper} from 'angular2/src/facade/collection';\n\nimport {PropertyBindingParser} from './property_binding_parser';\nimport {TextInterpolationParser} from './text_interpolation_parser';\nimport {DirectiveParser} from './directive_parser';\nimport {ViewSplitter} from './view_splitter';\nimport {ElementBindingMarker} from './element_binding_marker';\nimport {ProtoViewBuilder} from './proto_view_builder';\nimport {ProtoElementInjectorBuilder} from './proto_element_injector_builder';\nimport {ElementBinderBuilder} from './element_binder_builder';\nimport {ResolveCss} from './resolve_css';\nimport {ShimShadowDom} from './shim_shadow_dom';\nimport {DirectiveMetadata} from 'angular2/src/core/compiler/directive_metadata';\nimport {ShadowDomStrategy, EmulatedShadowDomStrategy} from 'angular2/src/core/compiler/shadow_dom_strategy';\n\n/**\n * Default steps used for compiling a template.\n * Takes in an HTMLElement and produces the ProtoViews,\n * ProtoElementInjectors and ElementBinders in the end.\n */\nexport function createDefaultSteps(\n    changeDetection:ChangeDetection,\n    parser:Parser,\n    compiledComponent: DirectiveMetadata,\n    directives: List<DirectiveMetadata>,\n    shadowDomStrategy: ShadowDomStrategy,\n    templateUrl: string) {\n\n  var steps = [\n    new ViewSplitter(parser),\n    new ResolveCss(compiledComponent, shadowDomStrategy, templateUrl),\n    new PropertyBindingParser(parser),\n    new DirectiveParser(directives),\n    new TextInterpolationParser(parser),\n    new ElementBindingMarker(),\n    new ProtoViewBuilder(changeDetection, shadowDomStrategy),\n    new ProtoElementInjectorBuilder(),\n    new ElementBinderBuilder(parser),\n  ]\n\n  if (shadowDomStrategy instanceof EmulatedShadowDomStrategy) {\n    var step = new ShimShadowDom(compiledComponent, shadowDomStrategy);\n    ListWrapper.push(steps, step);\n  }\n\n  return steps;\n}\n","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});","assert.genericType($__placeholder__0)","assert.type.$__placeholder__0)"]}